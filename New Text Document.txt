CREATE DATABASE TEST;
create table DEPT(
DEPTNO int(2),
DNAME VARCHAR(15),
LOC VARCHAR(10)
);

insert into dept values
(10,'ACCOUNTING','NEW YORK'),
(20,'RESEARCH','DALLAS'),
(30,'SALES','CHICAGO'),
(40,'OPERATIONS','BOSTON');

CREATE TABLE EMP(
EMPN0 INT(4),
ENAME VARCHAR(10),
JOB VARCHAR(9),
HIREDATE DATE,
SAL FLOAT(7,2),
COMM FLOAT(7,2),
DEPTNO INT(2)
);

INSERT INTO EMP VALUES
(7839,'KING','MANAGER','1991-11-17',5000,NULL,10),
(7698,'BLAKE','CLERK','1981-05-01',2850,NULL,30),
(7782,'CLARK','MANAGER','1981-06-09',2450,NULL,10),
(7566,'JONES','CLERK','1981-04-02',2975,NULL,20),
(7654,'MARTIN','SALESMAN','1981-09-28',1250,1400,30),
(7499,'ALLEN','SALESMAN','1981-02-20',1600,300,30);

-- 3. Display all the employees where SAL between 2500 and 5000 (inclusive of both).
SELECT * FROM EMP WHERE SAL BETWEEN 2500 AND 5000;

-- 4. Display all the ENAMEs in descending order of ENAME.
SELECT ENAME FROM EMP ORDER BY ENAME DESC;

-- 5. Display all the JOBs in lowercase
SELECT JOB,LOWER(JOB) FROM EMP;
SELECT JOB,LOWER(JOB) FROM EMP GROUP BY JOB;

-- Display the ENAMEs and the lengths of the ENAMEs.
 SELECT ENAME,LENGTH(ENAME) FROM EMP;
 
 -- 7. Display the DEPTNO and the count of employees who belong to that DEPTNO .
 SELECT DEPT.DEPTNO , COUNT(EMP.DEPTNO) FROM DEPT,EMP 
 WHERE EMP.DEPTNO = DEPT.DEPTNO GROUP BY DEPT.DEPTNO;

-- 8. Display the DNAMEs and the ENAMEs who belong to that DNAME.
SELECT DNAME,ENAME FROM DEPT,EMP
 WHERE EMP.DEPTNO = DEPT.DEPTNO;

-- 9. Display the position at which the string ‘AR’ occurs in the ename.
SELECT ENAME,instr(ENAME,'AR') FROM EMP;

-- 10. Display the HRA for each employee given that HRA is 20% of SAL.
SELECT SAL,SAL*0.2 AS "HRA" FROM EMP;


-- PROCEDURE
DELIMITER //
CREATE PROCEDURE PROC1 (S1 VARCHAR(15), S2 VARCHAR(15))
BEGIN
	IF INSTR(S1,S2) = 0 THEN
		INSERT INTO TEMPP VALUES (S1,S2,'S1 EXISTS IN S2');
	ELSE 
		INSERT INTO TEMPP VALUES (S1,S2,'S1 DOESNT EXIST IN S2');
    END IF ;
END; //
    DELIMITER ;




-- FUNCTION
DELIMITER // 
CREATE FUNCTION FUNC1 (S1 INT, S2 INT,S3 INT)
RETURNS BOOLEAN
DETERMINISTIC
BEGIN
IF S3 < (S1+S2) AND S2 < (S1+S3) AND S1 < (S2+S3) THEN
RETURN TRUE ;
ELSE 
RETURN FALSE ;
END IF;
END ; // 
DELIMITER ;

DELIMITER //
CREATE PROCEDURE TRIANGLE(S1 INT,S2 INT,S3 INT)
BEGIN 
DECLARE RESULT BOOLEAN; 
SET RESULT = FUNC1(S1,S2,S3) ; 
INSERT INTO TEMP1 VALUES (S1,S2,S3,RESULT);
END ; //
DELIMITER ;
CREATE TABLE TEMP1 ( 
S1 INT(3), 
S2 INT(3), 
S3 INT(3), 
RESULT VARCHAR(10) );

CALL TRIANGLE (10,10,21);
SELECT * FROM TEMP1;



